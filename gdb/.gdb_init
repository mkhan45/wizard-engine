
python
import gdb
import os

class CheckProt(gdb.Command):

    def __init__(self):
        super().__init__("checkprot", gdb.COMMAND_USER)

    def invoke(self, arg, from_tty):
        try:
            addr = int(arg, 0)
        except ValueError:
            print("Usage: checkprot ADDRESS (in hex or decimal)")
            return

        with open(f"/proc/{os.getpid()}/maps") as f:
            for line in f:
                parts = line.split()
                rng = parts[0].split('-')
                start, end = int(rng[0], 16), int(rng[1], 16)
                if start <= addr < end:
                    print(f"0x{addr:x} is in: {line.strip()}")
                    return
        print(f"Address 0x{addr:x} not found in /proc/self/maps")


class PrintFrame(gdb.Command):
    """Print the contents of an X86_64InterpreterFrame at the given address."""

    def __init__(self):
        super(PrintFrame, self).__init__("printframe", gdb.COMMAND_USER)

    def invoke(self, arg, from_tty):
        try:
            addr = int(gdb.parse_and_eval(arg))
        except Exception as e:
            print(f"Invalid address: {e}")
            return

        fields = [
            (0,  "wasm_func",  "i64"),
            (8,  "mem0_base",  "i64"),
            (16, "vfp",        "i64"),
            (24, "vsp",        "i64"),
            (32, "sidetable",  "i64"),
            (40, "stp",        "i64"),
            (48, "code",       "i64"),
            (56, "ip",         "i64"),
            (64, "eip",        "i64"),
            (72, "func_decl",  "i64"),
            (80, "instance",   "i64"),
            (88, "curpc",      "int"),
            (96, "accessor",   "i64"),
        ]

        for offset, name, typ in fields:
            try:
                if typ == "i64":
                    val = hex(gdb.Value(addr + offset).cast(gdb.lookup_type("long").pointer()).dereference())
                elif typ == "int":
                    val = gdb.Value(addr + offset).cast(gdb.lookup_type("int").pointer()).dereference()
            except gdb.error as e:
                val = f"<error: {e}>"
            print(f"{name:<12} @ +{offset:>2} = {val}")

PrintFrame()
CheckProt()

end

# Breakpoint for module compilation in --mode=spc.
# break X86_64SpcModuleCode.new

# Breakpoint for general-purpose wasm entrypoint.
# break Execute.call
