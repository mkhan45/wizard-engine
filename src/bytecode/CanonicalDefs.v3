// Constants
def HAS_MEM_INDEX = 0x40u8;

// Types.
type v128(low: i64, high: i64);
type Label;
type Value;
class Object { }
type TypeVar;
type FieldOffset;
type BlockType;
type Labels;
class Signature { }
class Function { }

enum FieldKind {
	U8, U16, U32, U64, F32, F64, V128, REF
}

// Immediates.
def imm_readILEB32() -> i32;
def imm_readILEB64() -> i64;
def imm_readU8() -> u8;
def imm_readBlockType() -> BlockType;
def imm_readLabels() -> Labels;

// Value stack.
def pop_i32() -> i32;
def pop_i64() -> i64;
def pop_f32() -> float;
def pop_f64() -> double;
def pop_v128() -> v128;
def pop_Object() -> Object;
def pop_Value(tv: TypeVar) -> Value;

def push_i32(v: i32);
def push_i64(v: i64);
def push_f32(v: float);
def push_f64(v: double);
def push_v128(v: v128);
def push_Object(v: Object);
def push_Value(tv: TypeVar, v: Value);

// Conversions.
def i32_reinterpret_f32(v: f32) -> i32;
def f32_reinterpret_i32(v: i32) -> f32;
def i64_reinterpret_f64(v: f64) -> i64;
def f64_reinterpret_i64(v: i64) -> f64;

// Local variables.
def getLocal(tv: TypeVar, index: i32) -> Value;
def setLocal(tv: TypeVar, index: i32, v: Value);

// Global variables.
def getGlobal(tv: TypeVar, index: i32) -> Value;
def setGlobal(tv: TypeVar, index: i32, v: Value);

// Function context.
def f_getLabel(depth: i32) -> Label;
def f_getLocalType(index: i32) -> TypeVar;
def f_getTopOfStackType() -> TypeVar;
def f_isAtEnd() -> bool;

// Module context.
def m_getGlobalType(index: i32) -> TypeVar;
def m_getFieldKind(struct_index: i32, field_index: i32) -> FieldKind;
def m_getFieldOffset(struct_index: i32, field_index: i32) -> FieldOffset;
def m_isMemory64(memory_index: i32) -> bool;
def m_isTable64(memory_index: i32) -> bool;
def m_getFuncSignature(func_index: i32) -> Signature;
def m_getSignature(sig_index: i32) -> Signature;

// Instance context.
def i_getTableFunction64(table_index: i32, sig: Signature, func_index: i64) -> Function;
def i_getTableFunction32(table_index: i32, sig: Signature, func_index: i32) -> Function;
def i_getFunction(func_index: i32) -> Function;

// Machine intrinsics.
def mach_readStructField_u8(obj: Object, offset: FieldOffset) -> u8;
def mach_readStructField_u16(obj: Object, offset: FieldOffset) -> u16;
def mach_readStructField_i32(obj: Object, offset: FieldOffset) -> i32;
def mach_readStructField_i64(obj: Object, offset: FieldOffset) -> i64;
def mach_readStructField_f32(obj: Object, offset: FieldOffset) -> float;
def mach_readStructField_f64(obj: Object, offset: FieldOffset) -> double;
def mach_readStructField_v128(obj: Object, offset: FieldOffset) -> v128;
def mach_readStructField_Object(obj: Object, offset: FieldOffset) -> Object;

def mach_readMemory64_i32(memory_index: i32, index: i64, offset: i64) -> i32;
def mach_readMemory32_i32(memory_index: i32, index: i32, offset: i32) -> i32;

def mach_readTable64(table_index: i32, index: i64) -> Object;
def mach_readTable32(table_index: i32, index: i32) -> Object;

def mach_writeTable64(table_index: i32, index: i64, val: Object);
def mach_writeTable32(table_index: i32, index: i32, val: Object);

def object_Null() -> Object;
def object_isNull(obj: Object) -> bool;
def object_New(sig: Signature) -> Object;

// Traps.
def invalid(); // should never occur
def trapNull();
def trapUnreachable();
def trapDivideByZero();
def trapDivideUnrepresentable();
def trapTableOOB();

// Control flow and calls.
def doReturn();
def doFallthru();
def doBlock(bt: BlockType) -> Label;
def doLoop(bt: BlockType) -> Label;
def doIf(bt: BlockType) -> Label;
def doElse() -> Label;
def doTry(bt: BlockType);
def doEnd();
def doCall(sig: Signature, target: Function);
def doReturnCall(sig: Signature, target: Function);
def doBranch(label: Label);
def doSwitch(labels: Labels, key: u32);


//===================================================================================================
//@bytecode start
def UNREACHABLE() {
	trapUnreachable();
}
def NOP() { 
    return void; // needed for CBD parser
}
def LOCAL_GET() {
	var index = imm_readILEB32();
	var tv = f_getLocalType(index);
	var val = getLocal(tv, index);
	push_Value(tv, val);
}
def LOCAL_SET() {
	var index = imm_readILEB32();
	var tv = f_getLocalType(index);
	var val = pop_Value(tv);
	setLocal(tv, index, val);
}
def LOCAL_TEE() {
	var index = imm_readILEB32();
	var tv = f_getLocalType(index);
	var val = pop_Value(tv);
	setLocal(tv, index, val);
	push_Value(tv, val);
}
def GLOBAL_GET() {
	var index = imm_readILEB32();
	var tv = m_getGlobalType(index);
	var val = getGlobal(tv, index);
	push_Value(tv, val);
}
def GLOBAL_SET() {
	var index = imm_readILEB32();
	var tv = m_getGlobalType(index);
	var val = pop_Value(tv);
	setGlobal(tv, index, val);
}
def TABLE_GET() {
	var table_index = imm_readILEB32();
	if (m_isTable64(table_index)) {
		var index = pop_i64();
		var val = mach_readTable64(table_index, index);
		push_Object(val);
	} else {
		var index = pop_i32();
		var val = mach_readTable32(table_index, index);
		push_Object(val);
	}
}
def TABLE_SET() {
	var table_index = imm_readILEB32();
	if (m_isTable64(table_index)) {
		var val = pop_Object();
		var index = pop_i64();
		mach_writeTable64(table_index, index, val);
	} else {
		var val = pop_Object();
		var index = pop_i32();
		mach_writeTable32(table_index, index, val);
	}
}
def CALL() {
	var index = imm_readILEB32();
	var sig = m_getFuncSignature(index);
	var target = i_getFunction(index); // null implies no signature check
	doCall(sig, target);
}
def CALL_INDIRECT() {
	var sig_index = imm_readILEB32();
	var table_index = imm_readILEB32();
	var sig = m_getSignature(sig_index);
	var is64 #sidetable = m_isTable64(table_index);
	if (is64) {
		var func_index = pop_i64();
		var target = i_getTableFunction64(table_index, sig, func_index);
		doCall(sig, target);
	} else {
		var func_index = pop_i32();
		var target = i_getTableFunction32(table_index, sig, func_index);
		doCall(sig, target);
	}
}
def RETURN_CALL() {
	var index = imm_readULEB32();
	var sig = m_getFuncSignature(index);
	var target = i_getFunction(index);
	doReturnCall(sig, target);
}
def DROP() {
	var tv = f_getTopOfStackType();
	pop_Value(tv);
}
def SELECT() {
	var c = pop_i32();
	var tv = f_getTopOfStackType();
	var b = pop_Value(tv), a = pop_Value(tv);
	if (i32.!=(c, 0)) push_Value(tv, a);
	else push_Value(tv, b);
}
def I32_CONST() {
	var x = imm_readILEB32();
	push_u32(x);
}
def I32_ADD() {
	var b = pop_i32(), a = pop_i32();
	var r = i32.+(a, b);
	push_i32(r);
}
def I32_SUB() {
	var b = pop_i32(), a = pop_i32();
	var r = i32.-(a, b);
	push_i32(r);
}
def I32_MUL() {
	var b = pop_i32(), a = pop_i32();
	var r = i32.*(a, b);
	push_i32(r);
}
def I32_DIV_S() {
	var b = pop_u32(), a = pop_u32();
	if (u32.==(b, 0)) return trapDivideByZero();
	if (bool.&&(u32.==(b, u32.view(-1)), u32.==(a, u32.view(-2_147_483_648)))) return trapDivideUnrepresentable();
	var r = U32_div_s(a, b);
	push_u32(r);
}
def I32_DIV_U() {
	var b = pop_i32(), a = pop_i32();
	if (i32.==(b, 0)) return trapDivideByZero();
	var r = i32./(a, b);
	push_i32(r);
}
def I32_EQZ() {
	var a = pop_i32();
	if (i32.==(a, 0)) push_i32(1);
	else push_i32(0);
}
def I32_EQ() {
	var b = pop_i32(), a = pop_i32();
	if (i32.==(a, b)) push_i32(1);
	else push_i32(0);
}
def I32_NE() {
	var b = pop_i32(), a = pop_i32();
	if (i32.!=(a, b)) push_i32(1);
	else push_i32(0);
}
def I32_LT_U() {
    // TODO: not actually unsigned
	var b = pop_i32(), a = pop_i32();
	if (i32.<(a, b)) push_i32(1);
	else push_i32(0);
}
def I32_LT_S() {
	var b = pop_u32(), a = pop_u32();
	if (U32_lt_s(a, b)) push_u32(1);
	else push_u32(0);
}
def I32_LE_S() {
	var b = pop_i32(), a = pop_i32();
	if (i32.<=(a, b)) push_i32(1);
	else push_i32(0);
}
def I32_GT_U() {
	var b = pop_i32(), a = pop_i32();
	if (i32.>(a, b)) push_i32(1);
	else push_i32(0);
}
def I32_AND() {
	var b = pop_i32(), a = pop_i32();
	var r = i32.&(a, b);
	push_i32(r);
}
def F32_CONST() {
	var x = imm_readILEB32();
	push_f32(f32_reinterpret_i32(x));
}
def F32_ADD() {
	var b = pop_f32(), a = pop_f32();
	var r = f32.+(a, b);
	push_f32(r);
}
def F32_SUB() {
	var b = pop_f32(), a = pop_f32();
	var r = f32.-(a, b);
	push_f32(r);
}
def F32_MUL() {
	var b = pop_f32(), a = pop_f32();
	var r = f32.*(a, b);
	push_f32(r);
}
def F32_DIV() {
	var b = pop_f32(), a = pop_f32();
	if (f32.==(b, 0.0)) return trapDivideByZero();
	var r = f32./(a, b);
	push_f32(r);
}
def F32_EQ() {
	var b = pop_f32(), a = pop_f32();
	if (f32.==(a, b)) push_f32(1.0);
	else push_f32(0.0);
}
def F32_NE() {
	var b = pop_f32(), a = pop_f32();
	if (f32.!=(a, b)) push_f32(1.0);
	else push_f32(0.0);
}
def F32_LT() {
    // TODO: not actually unsigned
	var b = pop_f32(), a = pop_f32();
	if (f32.<(a, b)) push_f32(1.0);
	else push_f32(0.0);
}
def F32_LE() {
	var b = pop_f32(), a = pop_f32();
	if (f32.<=(a, b)) push_f32(1.0);
	else push_f32(0.0);
}
def F32_GT() {
	var b = pop_f32(), a = pop_f32();
	if (f32.>(a, b)) push_f32(1.0);
	else push_f32(0.0);
}
def F32_CONST() {
	var x = imm_readULEB32();
	push_f32(f32_reinterpret_u32(x));
}
def F32_ADD() {
	var b = pop_f32(), a = pop_f32();
	var r = float.+(a, b);
	push_f32(r);
}
def F32_SUB() {
	var b = pop_f32(), a = pop_f32();
	var r = float.-(a, b);
	push_f32(r);
}
def F32_MUL() {
	var b = pop_f32(), a = pop_f32();
	var r = float.*(a, b);
	push_f32(r);
}
def F32_DIV() {
	var b = pop_f32(), a = pop_f32();
	if (float.==(b, 0.0f)) return trapDivideByZero();
	var r = float./(a, b);
	push_f32(r);
}
def F32_SQRT() {
	var a = pop_f32();
    var r = float.sqrt(a);
    push_f32(r);
}
def F32_EQ() {
	var b = pop_f32(), a = pop_f32();
	if (float.==(a, b)) push_u32(1);
	else push_u32(0);
}
def F32_NE() {
	var b = pop_f32(), a = pop_f32();
	if (float.!=(a, b)) push_u32(1);
	else push_u32(0);
}
def F32_LT() {
	var b = pop_f32(), a = pop_f32();
	if (float.<(a, b)) push_u32(1);
	else push_u32(0);
}
def F32_LE() {
	var b = pop_f32(), a = pop_f32();
	if (float.<=(a, b)) push_u32(1);
	else push_u32(0);
}
def F32_GT() {
	var b = pop_f32(), a = pop_f32();
	if (float.>(a, b)) push_u32(1);
	else push_u32(0);
}
def BR() {
	var depth = imm_readILEB32();
	var label #sidetable = f_getLabel(depth);
	return doBranch(label);
}
def BR_IF() {
	var depth = imm_readILEB32();
	var label #sidetable = f_getLabel(depth);
	var cond = pop_i32();
	if (i32.!=(cond, 0)) return doBranch(label);
	else return doFallthru();
}
def BLOCK() {
	var bt = imm_readBlockType();
	doBlock(bt);
}
def LOOP() {
	var bt = imm_readBlockType();
	doLoop(bt);
}
def TRY() {
	var bt = imm_readBlockType();
	doTry(bt);
}
def IF() {
	var bt = imm_readBlockType();
	var cond = pop_u32();
	var label #sidetable = doIf(bt);
	if (u32.==(cond, 0)) return doBranch(label);
	else return doFallthru();
}
def ELSE() {
	var label #sidetable = doElse();
	return doBranch(label);
}
def END() {
	doEnd();
	if (f_isAtEnd()) return doReturn();
}
def RETURN() {
	return doReturn();
}
def REF_NULL() {
    def idx = imm_readULEB32();
    push_Object(object_Null());
}
def REF_IS_NULL() {
    var obj = pop_Object();
    if (object_isNull(obj)) {
        push_u32(1);
    } else {
        push_u32(0);
    }
}
def REF_AS_NON_NULL() {
    var obj = pop_Object();
    if (object_isNull(obj)) {
        trapNull();
    }
    push_Object(obj); // XXX: wonder if we can optimize out pop->test->push in CBD
}
def STRUCT_NEW() {
    var struct_idx = imm_readULEB32();
    def sig = m_getSignature(struct_idx);
    def obj = object_New(sig);
    push_Object(obj);
}
def STRUCT_GET() {
	var struct_index = imm_readILEB32();
	var field_index = imm_readILEB32();
	var kind #sidetable = m_getFieldKind(struct_index, field_index);
	var offset #sidetable = m_getFieldOffset(struct_index, field_index);
	var obj = pop_Object();
	if (object_isNull(obj)) return trapNull();
	match (kind) {
		I32 => push_i32(mach_readStructField_i32(obj, offset));
		I64 => push_i64(mach_readStructField_i64(obj, offset));
		F32 => push_f32(mach_readStructField_f32(obj, offset));
		F64 => push_f64(mach_readStructField_f64(obj, offset));
		V128 => push_v128(mach_readStructField_v128(obj, offset));
		REF => push_Object(mach_readStructField_Object(obj, offset));
		_ => return invalid();
	}
}
def STRUCT_GET_S() {
	var struct_index = imm_readILEB32();
	var field_index = imm_readILEB32();
	var kind #sidetable = m_getFieldKind(struct_index, field_index);
	var offset #sidetable = m_getFieldOffset(struct_index, field_index);
	var obj = pop_Object();
	if (object_isNull(obj)) return trapNull();
	// TODO: sign extend
	match (kind) {
		U8 => push_i32(i32.view(mach_readStructField_i8(obj, offset)));
		U16 => push_i32(i32.view(mach_readStructField_i16(obj, offset)));
		_ => return invalid();
	}
}
def STRUCT_GET_U() {
	var struct_index = imm_readILEB32();
	var field_index = imm_readILEB32();
	var kind #sidetable = m_getFieldKind(struct_index, field_index);
	var offset #sidetable = m_getFieldOffset(struct_index, field_index);
	var obj = pop_Object();
	if (object_isNull(obj)) return trapNull();
	// TODO: zero extend
	match (kind) {
		U8 => push_i32(i32.view(mach_readStructField_u8(obj, offset)));
		U16 => push_i32(i32.view(mach_readStructField_u16(obj, offset)));
		_ => return invalid();
	}
}
def I32_LOAD() {
	var flags = imm_readU8();
	var memindex = 0;
	if (u8.&(flags, HAS_MEM_INDEX) == 0) memindex = imm_readILEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readILEB64();
		var index = pop_i64();
		var val = mach_readMemory64_i32(memindex, index, offset);
		push_i32(val);
	} else {
		var offset = imm_readILEB32();
		var index = pop_i32();
		var val = mach_readMemory32_i32(memindex, index, offset);
		push_i32(val);
	}
}
def I32_LOAD8_U() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.==(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u8(memindex, index, offset);
		push_u32(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u8(memindex, index, offset);
		push_u32(val);
	}
}
def I32_LOAD16_S() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.==(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u16(memindex, index, offset);
		push_u32(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u16(memindex, index, offset);
		push_u32(val);
	}
}
def I64_LOAD() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.==(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_u64(memindex, index, offset);
		push_u64(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_u64(memindex, index, offset);
		push_u64(val);
	}
}
def F32_LOAD() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.==(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_f32(memindex, index, offset);
		push_f32(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_f32(memindex, index, offset);
		push_f32(val);
	}
}
def F64_LOAD() {
	var flags = imm_readU8();
	var memindex = 0u;
	if (u8.==(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		var val = mach_readMemory64_f64(memindex, index, offset);
		push_f64(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		var val = mach_readMemory32_f64(memindex, index, offset);
		push_f64(val);
	}
}
def I32_STORE() {
    var flags = imm_readU8();
    var memindex = 0u;
	if (u8.==(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();

    var val = pop_u32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_u32(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_u32(memindex, index, offset, val);
	}
}
def I32_STORE8() {
    var flags = imm_readU8();
    var memindex = 0u;
	if (u8.==(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();

    var val = pop_u32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_u8(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_u8(memindex, index, offset, val);
	}
}
def I32_STORE16() {
    var flags = imm_readU8();
    var memindex = 0u;
	if (u8.==(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();

    var val = pop_u32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_u16(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_u16(memindex, index, offset, val);
	}
}
def I64_STORE() {
    var flags = imm_readU8();
    var memindex = 0u;
	if (u8.==(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();

    var val = pop_u64();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_u64(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_u64(memindex, index, offset, val);
	}
}
def F32_STORE() {
    var flags = imm_readU8();
    var memindex = 0u;
	if (u8.==(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();

    var val = pop_f32();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_f32(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_f32(memindex, index, offset, val);
	}
}
def F64_STORE() {
    var flags = imm_readU8();
    var memindex = 0u;
	if (u8.==(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();

    var val = pop_f64();
	if (m_isMemory64(memindex)) {
		var offset = imm_readULEB64();
		var index = pop_u64();
		mach_writeMemory64_f64(memindex, index, offset, val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_u32();
		mach_writeMemory32_f64(memindex, index, offset, val);
	}
}
//@bytecode end
//===================================================================================================

/*
@macro LOAD<T> `
	var flags = imm_readU8();
	var memindex: i32 = 0;
	if (u8.!=(u8.&(flags, HAS_MEM_INDEX), 0)) memindex = imm_readULEB32();
	if (m_isMemory64(memindex)) { // #sidetable
		var offset = imm_readULEB64();
		var index = pop_ ## T();
		var val = mach_readMemory64_ ## T(memindex, index, offset);
		push_ ## T(val);
	} else {
		var offset = imm_readULEB32();
		var index = pop_ ## T();
		var val = mach_readMemory32_ ## T(memindex, index, offset);
		push_ ## T(val);
	}
`
def I64_LOAD() @LOAD<i64>
*/
