// Immediates.
def imm_readILEB32() -> i32.V : read;
def imm_readILEB64() -> i64.V : read;
def imm_readU8() -> u8.V : read;
def imm_readBlockType() -> BlockType.V : read;
def imm_readLabels() -> Labels.V : read;

// Value stack.
def pop_i32() -> i32.I : pop;
def pop_i64() -> i64.I : pop;
def pop_u64() -> u64.I : pop;
def pop_f32() -> f32.I : pop;
def pop_f64() -> f64.I : pop;
def pop_v128() -> v128.I : pop;
def pop_Object() -> Object.I : pop;
def pop_Value(tv: TypeVar.V) -> Value.I : pop;

def push_i32(v: i32.I) : push;
def push_i64(v: i64.I) : push;
def push_u64(v: u64.I) : push;
def push_f32(v: f32.I) : push;
def push_f64(v: double.I) : push;
def push_v128(v: v128.I) : push;
def push_Object(v: Object.I) : push;
def push_Value(tv: TypeVar.V, v: Value.I) : push;

// Local variables.
def getLocal(tv: TypeVar.V, index: i32.V) -> Value.I : push;
def setLocal(tv: TypeVar.V, index: i32.V, v: Value.I) : local;

// Global variables.
def getGlobal(tv: TypeVar.V, index: i32.V) -> Value.I : push;
def setGlobal(tv: TypeVar.V, index: i32.V, v: Value.I) : global;

// Function context.
def f_getLabel(depth: i32.V) -> Label.V;
def f_getLocalType(index: i32.V) -> TypeVar.V;
def f_getTopOfStackType() -> TypeVar.V;
def f_isAtEnd() -> bool.V;

// Module context.
def m_getGlobalType(index: i32.V) -> TypeVar.V;
def m_getFieldKind(struct_index: i32.V, field_index: i32.V) -> FieldKind.V;
def m_getFieldOffset(struct_index: i32.V, field_index: i32.V) -> FieldOffset.V;
def m_isMemory64(memory_index: i32.V) -> bool.V;
def m_isTable64(memory_index: i32.V) -> bool.V;
def m_getFuncSignature(func_index: i32.V) -> Signature.V;
def m_getSignature(sig_index: i32.V) -> Signature.V;

// Instance context.
def i_getTableFunction64(table_index: i32.V, sig: Signature.V, func_index: u64.V) -> Function.V;
def i_getTableFunction32(table_index: i32.V, sig: Signature.V, func_index: i32.V) -> Function.V;
def i_getFunction(func_index: i32.V) -> Function.V;

// Machine intrinsics.
def mach_readStructField_u8(obj: Object.V, offset: FieldOffset.V) -> u8.I;
def mach_readStructField_u16(obj: Object.V, offset: FieldOffset.V) -> u16.I;
def mach_readStructField_u32(obj: Object.V, offset: FieldOffset.V) -> i32.I;
def mach_readStructField_u64(obj: Object.V, offset: FieldOffset.V) -> u64.I;
def mach_readStructField_f32(obj: Object.V, offset: FieldOffset.V) -> f32.I;
def mach_readStructField_f64(obj: Object.V, offset: FieldOffset.V) -> double.I;
def mach_readStructField_v128(obj: Object.V, offset: FieldOffset.V) -> v128.I;
def mach_readStructField_Object(obj: Object.V, offset: FieldOffset.V) -> Object.I;

def mach_readMemory64_i8(memory_index: i32.V, index: i64.I, offset: i64.V) -> i32.I;
def mach_readMemory32_i8(memory_index: i32.V, index: i32.I, offset: i32.V) -> i32.I;
def mach_readMemory64_i16(memory_index: i32.V, index: i64.I, offset: i64.V) -> i32.I;
def mach_readMemory32_i16(memory_index: i32.V, index: i32.I, offset: i32.V) -> i32.I;
def mach_readMemory64_i32(memory_index: i32.V, index: i64.I, offset: i64.V) -> i32.I;
def mach_readMemory32_i32(memory_index: i32.V, index: i32.I, offset: i32.V) -> i32.I;
def mach_readMemory64_i64(memory_index: i32.V, index: i64.I, offset: i64.V) -> i64.I;
def mach_readMemory32_i64(memory_index: i32.V, index: i32.I, offset: i32.V) -> i64.I;
def mach_readMemory64_u8(memory_index: i32.V, index: i64.I, offset: i64.V) -> i32.I;
def mach_readMemory32_u8(memory_index: i32.V, index: i32.I, offset: i32.V) -> i32.I;
def mach_readMemory64_u16(memory_index: i32.V, index: i64.I, offset: i64.V) -> i32.I;
def mach_readMemory32_u16(memory_index: i32.V, index: i32.I, offset: i32.V) -> i32.I;
def mach_readMemory64_u32(memory_index: i32.V, index: i64.I, offset: i64.V) -> i32.I;
def mach_readMemory32_u32(memory_index: i32.V, index: i32.I, offset: i32.V) -> i32.I;
def mach_readMemory64_u64(memory_index: i32.V, index: i64.I, offset: i64.V) -> i64.I;
def mach_readMemory32_u64(memory_index: i32.V, index: i32.I, offset: i32.V) -> i64.I;

def mach_writeMemory64_i8(memory_index: i32.V, index: i64.I, offset: i64.V, val: i32.I) : memory;
def mach_writeMemory32_i8(memory_index: i32.V, index: i32.I, offset: i32.V, val: i32.I) : memory;
def mach_writeMemory64_i16(memory_index: i32.V, index: i64.I, offset: i64.V, val: i32.I) : memory;
def mach_writeMemory32_i16(memory_index: i32.V, index: i32.I, offset: i32.V, val: i32.I) : memory;
def mach_writeMemory64_i32(memory_index: i32.V, index: i64.I, offset: i64.V, val: i32.I) : memory;
def mach_writeMemory32_i32(memory_index: i32.V, index: i32.I, offset: i32.V, val: i32.I) : memory;
def mach_writeMemory64_i64(memory_index: i32.V, index: i64.I, offset: i64.V, val: i64.I) : memory;
def mach_writeMemory32_i64(memory_index: i32.V, index: i32.I, offset: i32.V, val: i64.I) : memory;
def mach_writeMemory64_f64(memory_index: i32.V, index: i64.I, offset: i64.V, val: f64.I) : memory;
def mach_writeMemory32_f64(memory_index: i32.V, index: i32.I, offset: i32.V, val: f64.I) : memory;

def mach_readTable64(table_index: i32.V, index: u64.V) -> Object.I;
def mach_readTable32(table_index: i32.V, index: i32.V) -> Object.I;

def mach_writeTable64(table_index: i32.V, index: u64.V, val: Object.I);
def mach_writeTable32(table_index: i32.V, index: i32.V, val: Object.I);

// Traps.
def invalid() : trap;
def trapNull() : trap;
def trapUnreachable() : trap;
def trapDivideByZero() : trap;
def trapDivideUnrepresentable() : trap;
def trapTableOOB() : trap;

// Control flow and calls.
def doReturn() : ctl;
def doFallthru() : ctl;
def doBlock(bt: BlockType.V) : ctl;
def doLoop(bt: BlockType.V) : ctl;
def doTry(bt: BlockType.V) : ctl;
def doIf() : ctl;
def doElse() : ctl;
def doEnd() : ctl;
def doCall(sig: Signature.V, target: Function.V) : ctl;
def doReturnCall(sig: Signature.V, target: Function.V) : ctl;
def doBranch(label: Label.V) : ctl;
def doSwitch(labels: Labels.V, key: u32.I) : ctl;

def i32.==(lhs: i32.V, rhs: i32.V) -> i32.V;
def i32.!=(lhs: i32.V, rhs: i32.V) -> i32.V;
def i32.+(lhs: i32.V, rhs: i32.V) -> i32.V;
def i32.-(lhs: i32.V, rhs: i32.V) -> i32.V;
def i32./(lhs: i32.V, rhs: i32.V) -> i32.V;
def i32.*(lhs: i32.V, rhs: i32.V) -> i32.V;
def i32.&(lhs: i32.V, rhs: i32.V) -> i32.V;
def i32.<(lhs: i32.V, rhs: i32.V) -> i32.V;
def i32.<=(lhs: i32.V, rhs: i32.V) -> i32.V;
def i32.>(lhs: i32.V, rhs: i32.V) -> i32.V;

def float.+(lhs: f32.V, rhs: f32.V) -> f32.V;
def float.-(lhs: f32.V, rhs: f32.V) -> f32.V;
def float./(lhs: f32.V, rhs: f32.V) -> f32.V;
def float.*(lhs: f32.V, rhs: f32.V) -> f32.V;
def float.==(lhs: f32.V, rhs: f32.V) -> i32.V;
def float.!=(lhs: f32.V, rhs: f32.V) -> i32.V;
def float.<(lhs: f32.V, rhs: f32.V) -> i32.V;
def float.<=(lhs: f32.V, rhs: f32.V) -> i32.V;
def float.>(lhs: f32.V, rhs: f32.V) -> i32.V;
def float.sqrt(x: f32.V) -> f32.V;

def I32_equals(lhs: i32.I, rhs: i32.I) -> i32.I;
def I32_not_equals(lhs: i32.I, rhs: i32.I) -> i32.I;
def I32_plus(lhs: i32.I, rhs: i32.I) -> i32.I;
def I32_minus(lhs: i32.I, rhs: i32.I) -> i32.I;
def I32_div(lhs: i32.I, rhs: i32.I) -> i32.I;
def I32_lt(lhs: i32.I, rhs: i32.I) -> i32.I;
def I32_lte(lhs: i32.I, rhs: i32.I) -> i32.I;
def I32_gt(lhs: i32.I, rhs: i32.I) -> i32.I;
def I32_times(lhs: i32.I, rhs: i32.I) -> i32.I;
def I32_and(lhs: i32.I, rhs: i32.I) -> i32.I;

def F32_equals(lhs: f32.I, rhs: f32.I) -> i32.I;
def F32_not_equals(lhs: f32.I, rhs: f32.I) -> i32.I;
def F32_lt(lhs: f32.I, rhs: f32.I) -> i32.I;
def F32_lte(lhs: f32.I, rhs: f32.I) -> i32.I;
def F32_gt(lhs: f32.I, rhs: f32.I) -> i32.I;
def F32_plus(lhs: f32.I, rhs: f32.I) -> f32.I;
def F32_minus(lhs: f32.I, rhs: f32.I) -> f32.I;
def F32_div(lhs: f32.I, rhs: f32.I) -> f32.I;
def F32_times(lhs: f32.I, rhs: f32.I) -> f32.I;

def f32_reinterpret_i32(i: i32.I) -> f32.I;
def f64_reinterpret_i64(i: i64.I) -> f64.I;

def rtcast_i32(i: i32.V) -> i32.I;
def rtcast_f32(f: f32.V) -> f32.I;

def object_isNull(obj: Object.I) -> i32.V;
def object_New(sig: Signature.V) -> Object.I;
