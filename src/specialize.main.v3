def parseArg(s: string) -> Value {
	return Value.I32(s[0] - 48u32);
}

def main(args: Array<string>) -> int {
	def programArgs: Array<string> = Arrays.range(args, 1, args.length);
	def path: string = args[0];

	def locals: Array<Value> = Arrays.map(programArgs, parseArg);
	System.puts("Args: ");
	for (l in locals) {
		System.puti(int.!(Value.I32.!(l).val));
		System.puts(" ");
	}
	System.puts("\n");

	def engine = Engine.new();
	def result = engine.loadWasmFile(path);
	def module = FileLoadResult.Ok.!(result).module;
	def exts: Extension.set; // how to make empty enum set without extra decl?
	def i = Instantiator.new(exts, module, [], ErrorGen.new(path));
	def instance = i.run();
	var entry: (Function, Array<Value>);
	for (j < i.processors.length) {
		var p = i.processors[j];
		if (HostModule.?(p)) {
			entry = HostModule.!(p).getMain(instance);
			if (entry.0 != null) break;
		}
	}

	// not gonna deal with tiering rn
	def compiler = X86Compiler.mk(module.filename);
	def specializer = SpecializingCompiler.new(compiler);

	def func = WasmFunction.!(entry.0).decl;
	def res = specializer.special_gen0(
			module, func, [SpecialArg.Const(Value.I32(0)), SpecialArg.Const(Value.I32(0))]
	);

	if (res) {
		System.puts("compiled");
	} else {
		System.puts("didnt compiled");
	}

	return 0;
}
