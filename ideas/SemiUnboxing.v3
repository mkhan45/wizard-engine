// WebAssembly program values.
type Value {
	case Ref(val: Object);
	case I31(val: u31);
	case I32(val: u32);
	case I64(val: u64);
	case F32(bits: u32);
	case F64(bits: u64);
	case V128(low: u64, high: u64);
}

// When unboxed, the compiler might represent this as:
//   (u3, ref, u64, u64)
// Because on targets that lack tagged pointers, ref must remain independent.
// Practically speaking, unboxing V128 is probably not worth, except when the
// interpreter is running SIMD code. Elsewhere, it mostly just forces an
// additional scalar to be used.

// We could do better with:
//   (u3, ref, u64)
// Where the V128 case is boxed and stored in the ref field.

// We can do even better if we can unify the tag with the ref.
// This is possible by having a small number of actual heap objects that
// represent each tag, leaving:
//   (ref, u64)


// We can't yet do this with Virgil's unboxing support. What follows is a manual
// translation to explore the performance implications.

class ValueTag { } // value tag must be at the root of all references.
class Object extends ValueTag { }  // object must extend value tag for this to work.
class Function extends Object { }
class HeapObject extends Object { }
class StructInstance extends HeapObject { }
class ArrayInstance extends HeapObject { }

// Classes for each tag. Technically we don't need a separate subclass for each,
// but this reduces the space storage for the instances by encoding the tag in
// the type information.
class ValueTag_i31 extends ValueTag { }
class ValueTag_i32 extends ValueTag { }
class ValueTag_i64 extends ValueTag { }
class ValueTag_f32 extends ValueTag { }
class ValueTag_f64 extends ValueTag { }

// V128's have to be boxed and have to fit under ValueTag to be put in the scalar part.
class BoxedV128(low: u64, high: u64) extends ValueTag { }

// Then a semi-unboxed value is just a pair of a tag and bits.
type UValue(tag: ValueTag, bits: u64) #unboxed {
	def equals(that: UValue) -> bool {
		if (BoxedV128.?(this.tag) && BoxedV128.?(that.tag)) {
			var a = BoxedV128.!(this.tag), b = BoxedV128.!(that.tag);
			return a.low == b.low && a.high == b.high;
		}
		return this.tag == that.tag && this.bits == that.bits;
	}
}

// Machinery for "boxing" and "unboxing" Virgil primitives as semi-boxed values.
component SemiUnboxing {
	def TAG_I31 = ValueTag_i31.new();
	def TAG_I32 = ValueTag_i32.new();
	def TAG_I64 = ValueTag_i64.new();
	def TAG_F32 = ValueTag_f32.new();
	def TAG_F64 = ValueTag_f64.new();

	// Boxing utilities.
	def box_i(v: i32) => UValue(TAG_I32, u32.view(v));
	def box_u(v: u32) => UValue(TAG_I32, v);
	def box_l(v: i64) => UValue(TAG_I64, u64.view(v));
	def box_w(v: u64) => UValue(TAG_I64, v);
	def box_f(v: float) => UValue(TAG_F32, u32.view(v));
	def box_d(v: double) => UValue(TAG_F64, u64.view(v));
	def box_fu32(v: u32) => UValue(TAG_F32, v);
	def box_du64(v: u64) => UValue(TAG_F64, v);
	def box_s(x: u64, y: u64) => UValue(BoxedV128.new(x, y), 0);

	// Translate between the ADT value and a semi-boxed value.
	def box_v(v: Value) -> UValue {
		match (v) {
			Ref(val) => return UValue(val, 0);
			I31(val) => return UValue(TAG_I31, val);
			I32(val) => return UValue(TAG_I32, val);
			I64(val) => return UValue(TAG_I64, val);
			F32(bits) => return UValue(TAG_F32, bits);
			F64(bits) => return UValue(TAG_F64, bits);
			V128(low, high) => return UValue(BoxedV128.new(low, high), 0);
		}
	}

	// Unboxing utilities.
	def unbox_i(v: UValue) => i32.view(v.bits);
	def unbox_u(v: UValue) => u32.view(v.bits);
	def unbox_u8(v: UValue) => u8.view(v.bits);
	def unbox_u16(v: UValue) => u16.view(v.bits);
	def unbox_fu32(v: UValue) => u32.view(v.bits);
	def unbox_du64(v: UValue) => u64.view(v.bits);
	def unbox_f(v: UValue) => float.view(u32.view(v.bits));
	def unbox_d(v: UValue) => double.view(v.bits);
	def unbox_l(v: UValue) => i64.view(v.bits);
	def unbox_w(v: UValue) => u64.view(v.bits);
	def unbox_w8(v: UValue) => u8.view(v.bits);
	def unbox_w16(v: UValue) => u16.view(v.bits);
	def unbox_w32(v: UValue) => u32.view(v.bits);
	def unbox_s(v: UValue) -> (u64, u64) {
		var b = BoxedV128.!(v.tag);
		return (b.low, b.high);
	}
}
