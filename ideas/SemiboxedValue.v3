class Object {
}

type Value {
	case Ref(val: Object);
	case I31(val: u31);
	case I32(val: u32);
	case I64(val: u64);
	case F32(bits: u32);
	case F64(bits: u64);
	case V128(low: u64, high: u64);
}

type SemiboxedValue(tag: u3, word: u64, obj: Object) #unboxed {
	def toValue() -> Value {
		match (tag) {
			Value.I31.tag => return Value.I31(u31.view(word));
			Value.I32.tag => return Value.I32(u32.view(word));
			Value.I64.tag => return Value.I64(u64.view(word));
			Value.F32.tag => return Value.F32(u32.view(word));
			Value.F64.tag => return Value.F64(u64.view(word));
			Value.Ref.tag => return Value.Ref(obj);
			Value.V128.tag => {
				var v = BoxedV128.!(obj);
				return Value.V128(v.low, v.high);
			}
			_ => return Value.Ref(null);
		}
	}
}

class BoxedV128(low: u64, high: u64) extends Object { }
